"""add_public_id_to_all_models

Revision ID: 926cfd13592a
Revises: 726a6247d8bc
Create Date: 2025-06-13 15:35:07.792908

"""
from alembic import op
import sqlalchemy as sa
import uuid
import random
import string


# revision identifiers, used by Alembic.
revision = '926cfd13592a'
down_revision = '726a6247d8bc'
branch_labels = None
depends_on = None


def generate_random_str(length=12):
    """生成指定长度的随机字符串"""
    characters = string.ascii_letters + string.digits
    return ''.join(random.choice(characters) for _ in range(length))


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # 1. 先添加nullable的public_id字段
    op.add_column('agents', sa.Column('public_id', sa.String(length=50), nullable=True))
    op.add_column('chat_messages', sa.Column('tool_calls_data', sa.JSON(), nullable=True))
    op.add_column('chat_messages', sa.Column('public_id', sa.String(length=50), nullable=True))
    op.add_column('note_sessions', sa.Column('public_id', sa.String(length=50), nullable=True))
    op.add_column('notes', sa.Column('public_id', sa.String(length=50), nullable=True))
    op.add_column('sessions', sa.Column('public_id', sa.String(length=50), nullable=True))
    op.add_column('tool_call_history', sa.Column('public_id', sa.String(length=50), nullable=True))
    op.add_column('users', sa.Column('public_id', sa.String(length=50), nullable=True))
    
    # 2. 为现有数据生成public_id
    connection = op.get_bind()
    
    # 为用户生成public_id
    result = connection.execute(sa.text("SELECT id FROM users WHERE public_id IS NULL"))
    for row in result:
        public_id = f"user-{generate_random_str(12)}"
        connection.execute(sa.text("UPDATE users SET public_id = :public_id WHERE id = :id"), 
                         {"public_id": public_id, "id": row[0]})
    
    # 为Agent生成public_id
    result = connection.execute(sa.text("SELECT id FROM agents WHERE public_id IS NULL"))
    for row in result:
        public_id = f"agent-{generate_random_str(12)}"
        connection.execute(sa.text("UPDATE agents SET public_id = :public_id WHERE id = :id"), 
                         {"public_id": public_id, "id": row[0]})
    
    # 为会话生成public_id
    result = connection.execute(sa.text("SELECT id FROM sessions WHERE public_id IS NULL"))
    for row in result:
        public_id = f"chat-{generate_random_str(12)}"
        connection.execute(sa.text("UPDATE sessions SET public_id = :public_id WHERE id = :id"), 
                         {"public_id": public_id, "id": row[0]})
    
    # 为笔记生成public_id
    result = connection.execute(sa.text("SELECT id FROM notes WHERE public_id IS NULL"))
    for row in result:
        public_id = f"note-{generate_random_str(12)}"
        connection.execute(sa.text("UPDATE notes SET public_id = :public_id WHERE id = :id"), 
                         {"public_id": public_id, "id": row[0]})
    
    # 为消息生成public_id
    result = connection.execute(sa.text("SELECT id FROM chat_messages WHERE public_id IS NULL"))
    for row in result:
        public_id = f"msg-{generate_random_str(12)}"
        connection.execute(sa.text("UPDATE chat_messages SET public_id = :public_id WHERE id = :id"), 
                         {"public_id": public_id, "id": row[0]})
    
    # 为笔记会话关联生成public_id
    result = connection.execute(sa.text("SELECT id FROM note_sessions WHERE public_id IS NULL"))
    for row in result:
        public_id = f"rel-{generate_random_str(12)}"
        connection.execute(sa.text("UPDATE note_sessions SET public_id = :public_id WHERE id = :id"), 
                         {"public_id": public_id, "id": row[0]})
    
    # 为工具调用历史生成public_id
    result = connection.execute(sa.text("SELECT id FROM tool_call_history WHERE public_id IS NULL"))
    for row in result:
        public_id = f"tool-{generate_random_str(12)}"
        connection.execute(sa.text("UPDATE tool_call_history SET public_id = :public_id WHERE id = :id"), 
                         {"public_id": public_id, "id": row[0]})
    
    # 3. 设置字段为非空并创建索引
    op.alter_column('agents', 'public_id', nullable=False)
    op.create_index(op.f('ix_agents_public_id'), 'agents', ['public_id'], unique=True)
    
    op.alter_column('chat_messages', 'public_id', nullable=False)
    op.create_index(op.f('ix_chat_messages_public_id'), 'chat_messages', ['public_id'], unique=True)
    
    op.alter_column('note_sessions', 'public_id', nullable=False)
    op.create_index(op.f('ix_note_sessions_public_id'), 'note_sessions', ['public_id'], unique=True)
    
    op.alter_column('notes', 'public_id', nullable=False)
    op.create_index(op.f('ix_notes_public_id'), 'notes', ['public_id'], unique=True)
    
    op.alter_column('sessions', 'public_id', nullable=False)
    op.create_index(op.f('ix_sessions_public_id'), 'sessions', ['public_id'], unique=True)
    
    op.alter_column('tool_call_history', 'public_id', nullable=False)
    op.create_index(op.f('ix_tool_call_history_public_id'), 'tool_call_history', ['public_id'], unique=True)
    
    op.alter_column('users', 'public_id', nullable=False)
    op.create_index(op.f('ix_users_public_id'), 'users', ['public_id'], unique=True)
    
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_public_id'), table_name='users')
    op.drop_column('users', 'public_id')
    op.drop_index(op.f('ix_tool_call_history_public_id'), table_name='tool_call_history')
    op.drop_column('tool_call_history', 'public_id')
    op.drop_index(op.f('ix_sessions_public_id'), table_name='sessions')
    op.drop_column('sessions', 'public_id')
    op.drop_index(op.f('ix_notes_public_id'), table_name='notes')
    op.drop_column('notes', 'public_id')
    op.drop_index(op.f('ix_note_sessions_public_id'), table_name='note_sessions')
    op.drop_column('note_sessions', 'public_id')
    op.drop_index(op.f('ix_chat_messages_public_id'), table_name='chat_messages')
    op.drop_column('chat_messages', 'public_id')
    op.drop_column('chat_messages', 'tool_calls_data')
    op.drop_index(op.f('ix_agents_public_id'), table_name='agents')
    op.drop_column('agents', 'public_id')
    # ### end Alembic commands ### 