"""update_mcp_server_model_with_user_association_and_standardization

Revision ID: 80f2848f9809
Revises: 2ab934b7ac87
Create Date: 2025-06-14 23:54:16.660243

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '80f2848f9809'
down_revision = '2ab934b7ac87'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # 首先添加可为空的列
    op.add_column('mcp_servers', sa.Column('user_id', sa.Integer(), nullable=True, comment='所属用户ID'))
    op.add_column('mcp_servers', sa.Column('is_public', sa.Boolean(), nullable=True, comment='是否公开分享'))
    op.add_column('mcp_servers', sa.Column('share_link', sa.String(length=255), nullable=True, comment='分享链接'))
    op.add_column('mcp_servers', sa.Column('public_id', sa.String(length=50), nullable=True))
    op.add_column('mcp_servers', sa.Column('is_deleted', sa.Boolean(), nullable=True))
    op.add_column('mcp_servers', sa.Column('deleted_at', postgresql.TIMESTAMP(timezone=True), nullable=True))
    
    # 为现有数据设置默认值
    # 获取第一个用户ID作为默认用户（如果没有用户则创建一个系统用户）
    connection = op.get_bind()
    
    # 检查是否有用户
    result = connection.execute(sa.text("SELECT id FROM users LIMIT 1"))
    user_row = result.fetchone()
    
    if user_row:
        default_user_id = user_row[0]
    else:
        # 创建一个系统用户
        import time
        import random
        import string
        
        def generate_random_str(length=12):
            return ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(length))
        
        system_user_id = f"user-{generate_random_str()}"
        connection.execute(sa.text("""
            INSERT INTO users (public_id, username, phone, hashed_password, is_active, is_superuser, created_at, updated_at, is_deleted)
            VALUES (:public_id, 'system', 'system', 'system', true, true, timezone('Asia/Shanghai', now()), timezone('Asia/Shanghai', now()), false)
        """), {"public_id": system_user_id})
        
        result = connection.execute(sa.text("SELECT id FROM users WHERE username = 'system'"))
        default_user_id = result.fetchone()[0]
    
    # 更新现有的MCP服务器记录
    connection.execute(sa.text("""
        UPDATE mcp_servers 
        SET 
            user_id = :user_id,
            is_public = false,
            is_deleted = false,
            public_id = 'mcp-' || substr(md5(random()::text), 1, 12)
        WHERE user_id IS NULL
    """), {"user_id": default_user_id})
    
    # 现在将列设置为非空
    op.alter_column('mcp_servers', 'user_id', nullable=False)
    op.alter_column('mcp_servers', 'is_public', nullable=False)
    op.alter_column('mcp_servers', 'public_id', nullable=False)
    op.alter_column('mcp_servers', 'is_deleted', nullable=False)
    op.alter_column('mcp_servers', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=None,
               nullable=False,
               comment=None,
               existing_comment='创建时间')
    op.alter_column('mcp_servers', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=None,
               nullable=False,
               comment=None,
               existing_comment='更新时间')
    op.drop_index('ix_mcp_servers_name', table_name='mcp_servers')
    op.create_index(op.f('ix_mcp_servers_name'), 'mcp_servers', ['name'], unique=False)
    op.create_index(op.f('ix_mcp_servers_is_deleted'), 'mcp_servers', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_mcp_servers_public_id'), 'mcp_servers', ['public_id'], unique=True)
    op.create_index(op.f('ix_mcp_servers_user_id'), 'mcp_servers', ['user_id'], unique=False)
    op.create_foreign_key(None, 'mcp_servers', 'users', ['user_id'], ['id'])
    op.create_table_comment(
        'mcp_servers',
        'MCP服务器配置表',
        existing_comment=None,
        schema=None
    )
    # 为tool_call_history添加user_id字段
    op.add_column('tool_call_history', sa.Column('user_id', sa.Integer(), nullable=True))
    
    # 为现有的tool_call_history记录设置user_id
    # 通过session_id关联到chat，再关联到user
    connection.execute(sa.text("""
        UPDATE tool_call_history 
        SET user_id = (
            SELECT s.user_id 
            FROM sessions s 
            WHERE s.id = tool_call_history.session_id
        )
        WHERE user_id IS NULL
    """))
    
    # 将user_id设置为非空
    op.alter_column('tool_call_history', 'user_id', nullable=False)
    op.create_index(op.f('ix_tool_call_history_user_id'), 'tool_call_history', ['user_id'], unique=False)
    op.create_foreign_key(None, 'tool_call_history', 'users', ['user_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'tool_call_history', type_='foreignkey')
    op.drop_index(op.f('ix_tool_call_history_user_id'), table_name='tool_call_history')
    op.drop_column('tool_call_history', 'user_id')
    op.drop_table_comment(
        'mcp_servers',
        existing_comment='MCP服务器配置表',
        schema=None
    )
    op.drop_constraint(None, 'mcp_servers', type_='foreignkey')
    op.drop_index(op.f('ix_mcp_servers_user_id'), table_name='mcp_servers')
    op.drop_index(op.f('ix_mcp_servers_public_id'), table_name='mcp_servers')
    op.drop_index(op.f('ix_mcp_servers_is_deleted'), table_name='mcp_servers')
    op.drop_index(op.f('ix_mcp_servers_name'), table_name='mcp_servers')
    op.create_index('ix_mcp_servers_name', 'mcp_servers', ['name'], unique=True)
    op.alter_column('mcp_servers', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('now()'),
               nullable=True,
               comment='更新时间')
    op.alter_column('mcp_servers', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('now()'),
               nullable=True,
               comment='创建时间')
    op.drop_column('mcp_servers', 'deleted_at')
    op.drop_column('mcp_servers', 'is_deleted')
    op.drop_column('mcp_servers', 'public_id')
    op.drop_column('mcp_servers', 'share_link')
    op.drop_column('mcp_servers', 'is_public')
    op.drop_column('mcp_servers', 'user_id')
    # ### end Alembic commands ### 